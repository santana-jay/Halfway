{"ast":null,"code":"var _jsxFileName = \"/workspaces/Halfway/halfway/frontend/src/AddressAutoComplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressAutocomplete = ({\n  label,\n  id,\n  value,\n  onChange,\n  placeholder = 'Enter an address',\n  required = false\n}) => {\n  _s();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    const initAutocomplete = () => {\n      // Check if Google Maps is available\n      if (!window.google || !window.google.maps || !window.google.maps.places) {\n        console.warn('Google Maps Places API not loaded');\n        return;\n      }\n\n      // Get the input element\n      const input = inputRef.current;\n      if (!input) return;\n\n      // Create the autocomplete instance\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n\n      // Set fields to retrieve (optional)\n      autocomplete.setFields(['address_components', 'formatted_address', 'geometry', 'name']);\n\n      // Add listener for place selection\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place.formatted_address) {\n          onChange(place.formatted_address);\n          console.log('Selected place:', place.formatted_address);\n        }\n      });\n    };\n\n    // Initialize autocomplete when the component mounts\n    initAutocomplete();\n\n    // Cleanup function\n    return () => {\n      // No need to clean up Google Maps objects as they are automatically \n      // removed when the DOM element is destroyed\n    };\n  }, [onChange]); // Only re-run if onChange changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      style: {\n        display: 'block',\n        marginBottom: '5px'\n      },\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      id: id,\n      value: value,\n      onChange: e => onChange(e.target.value),\n      placeholder: placeholder,\n      required: required,\n      style: {\n        width: '100%',\n        padding: '8px',\n        borderRadius: '4px',\n        border: '1px solid #ccc'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(AddressAutocomplete, \"cBQ6FQ+sf5H+lvNONLKqtm4aeQ8=\");\n_c = AddressAutocomplete;\nexport default AddressAutocomplete;\n\n// import React, { useEffect, useState } from 'react';\n// import usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\n\n// interface AddressAutocompleteProps {\n//   label: string;\n//   id: string;\n//   value: string;\n//   onChange: (value: string) => void;\n//   placeholder?: string;\n//   required?: boolean;\n// }\n\n// const AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n//   label,\n//   id,\n//   value,\n//   onChange,\n//   placeholder = 'Enter an address',\n//   required = false,\n// }) => {\n//   const {\n//     ready,\n//     value: inputValue,\n//     suggestions: { status, data },\n//     setValue,\n//     clearSuggestions,\n//   } = usePlacesAutocomplete({\n//     requestOptions: {\n//       /* Define search scope here - e.g. country restrictions */\n//       componentRestrictions: { country: 'us' }, // Limit to US addresses - modify as needed\n//     },\n//     debounce: 300,\n//   });\n\n//   const [showSuggestions, setShowSuggestions] = useState(false);\n\n//   // Sync external value with internal input state\n//   useEffect(() => {\n//     setValue(value, false);\n//   }, [value, setValue]);\n\n//   const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//     onChange(e.target.value);\n//     setShowSuggestions(true);\n//   };\n\n//   const handleSelect = (suggestion: google.maps.places.AutocompletePrediction) => () => {\n//     // Update the value of the input\n//     setValue(suggestion.description, false);\n//     onChange(suggestion.description);\n//     setShowSuggestions(false);\n//     clearSuggestions();\n//   };\n\n//   return (\n//     <div className='address-autocomplete' style={{ position: 'relative' }}>\n//       <label \n//         htmlFor={id}\n//         style={{ display: 'block', marginBottom: '5px' }}\n//       >\n//         {label}\n//       </label>\n//       <input\n//         type='text'\n//         id={id}\n//         value={inputValue}\n//         onChange={handleInput}\n//         disabled={!ready}\n//         required={required}\n//         placeholder={placeholder}\n//         style={{ \n//           width: '100%', \n//           padding: '8px', \n//           borderRadius: '4px', \n//           border: '1px solid #ccc',\n//         }}\n//         onFocus={() => setShowSuggestions(true)}\n//         onBlur={() => {\n//           // Delay hiding suggestions to allow for selection\n//           setTimeout(() => setShowSuggestions(false), 200);\n//         }}\n//       />\n\n//       {/* Suggestions dropdown */}\n//       {status === 'OK' && showSuggestions && (\n//         <ul \n//           style={{ \n//             position: 'absolute', \n//             zIndex: 1000, \n//             width: '100%', \n//             backgroundColor: 'white', \n//             borderRadius: '4px', \n//             boxShadow: '0 2px 6px rgba(0,0,0,0.3)', \n//             marginTop: '2px', \n//             padding: '8px 0', \n//             maxHeight: '200px', \n//             overflowY: 'auto',\n//             listStyle: 'none',\n//           }}\n//         >\n//           {data.map((suggestion) => (\n//             <li \n//               key={suggestion.place_id}\n//               onClick={handleSelect(suggestion)}\n//               style={{ \n//                 padding: '8px 16px', \n//                 cursor: 'pointer',\n//                 fontSize: '14px',\n//               }}\n//               onMouseDown={(e) => e.preventDefault()} // Prevent blur\n//               onMouseOver={(e) => {\n//                 e.currentTarget.style.backgroundColor = '#f1f3f4';\n//               }}\n//               onMouseOut={(e) => {\n//                 e.currentTarget.style.backgroundColor = 'transparent';\n//               }}\n//             >\n//               {suggestion.description}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AddressAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"AddressAutocomplete\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","AddressAutocomplete","label","id","value","onChange","placeholder","required","_s","inputRef","initAutocomplete","window","google","maps","places","console","warn","input","current","autocomplete","Autocomplete","setFields","addListener","place","getPlace","formatted_address","log","children","htmlFor","style","display","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","e","target","width","padding","borderRadius","border","_c","$RefreshReg$"],"sources":["/workspaces/Halfway/halfway/frontend/src/AddressAutoComplete.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\ninterface AddressAutocompleteProps {\n  label: string;\n  id: string;\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  required?: boolean;\n}\n\nconst AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n  label,\n  id,\n  value,\n  onChange,\n  placeholder = 'Enter an address',\n  required = false,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    const initAutocomplete = () => {\n      // Check if Google Maps is available\n      if (!window.google || !window.google.maps || !window.google.maps.places) {\n        console.warn('Google Maps Places API not loaded');\n        return;\n      }\n\n      // Get the input element\n      const input = inputRef.current;\n      if (!input) return;\n\n      // Create the autocomplete instance\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      \n      // Set fields to retrieve (optional)\n      autocomplete.setFields(['address_components', 'formatted_address', 'geometry', 'name']);\n      \n      // Add listener for place selection\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place.formatted_address) {\n          onChange(place.formatted_address);\n          console.log('Selected place:', place.formatted_address);\n        }\n      });\n    };\n\n    // Initialize autocomplete when the component mounts\n    initAutocomplete();\n\n    // Cleanup function\n    return () => {\n      // No need to clean up Google Maps objects as they are automatically \n      // removed when the DOM element is destroyed\n    };\n  }, [onChange]); // Only re-run if onChange changes\n\n  return (\n    <div>\n      <label \n        htmlFor={id}\n        style={{ display: 'block', marginBottom: '5px' }}\n      >\n        {label}\n      </label>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        id={id}\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={placeholder}\n        required={required}\n        style={{ \n          width: '100%', \n          padding: '8px', \n          borderRadius: '4px', \n          border: '1px solid #ccc' \n        }}\n      />\n    </div>\n  );\n};\n\nexport default AddressAutocomplete;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\n\n// interface AddressAutocompleteProps {\n//   label: string;\n//   id: string;\n//   value: string;\n//   onChange: (value: string) => void;\n//   placeholder?: string;\n//   required?: boolean;\n// }\n\n// const AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n//   label,\n//   id,\n//   value,\n//   onChange,\n//   placeholder = 'Enter an address',\n//   required = false,\n// }) => {\n//   const {\n//     ready,\n//     value: inputValue,\n//     suggestions: { status, data },\n//     setValue,\n//     clearSuggestions,\n//   } = usePlacesAutocomplete({\n//     requestOptions: {\n//       /* Define search scope here - e.g. country restrictions */\n//       componentRestrictions: { country: 'us' }, // Limit to US addresses - modify as needed\n//     },\n//     debounce: 300,\n//   });\n  \n//   const [showSuggestions, setShowSuggestions] = useState(false);\n\n//   // Sync external value with internal input state\n//   useEffect(() => {\n//     setValue(value, false);\n//   }, [value, setValue]);\n\n//   const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//     onChange(e.target.value);\n//     setShowSuggestions(true);\n//   };\n\n//   const handleSelect = (suggestion: google.maps.places.AutocompletePrediction) => () => {\n//     // Update the value of the input\n//     setValue(suggestion.description, false);\n//     onChange(suggestion.description);\n//     setShowSuggestions(false);\n//     clearSuggestions();\n//   };\n\n//   return (\n//     <div className='address-autocomplete' style={{ position: 'relative' }}>\n//       <label \n//         htmlFor={id}\n//         style={{ display: 'block', marginBottom: '5px' }}\n//       >\n//         {label}\n//       </label>\n//       <input\n//         type='text'\n//         id={id}\n//         value={inputValue}\n//         onChange={handleInput}\n//         disabled={!ready}\n//         required={required}\n//         placeholder={placeholder}\n//         style={{ \n//           width: '100%', \n//           padding: '8px', \n//           borderRadius: '4px', \n//           border: '1px solid #ccc',\n//         }}\n//         onFocus={() => setShowSuggestions(true)}\n//         onBlur={() => {\n//           // Delay hiding suggestions to allow for selection\n//           setTimeout(() => setShowSuggestions(false), 200);\n//         }}\n//       />\n\n//       {/* Suggestions dropdown */}\n//       {status === 'OK' && showSuggestions && (\n//         <ul \n//           style={{ \n//             position: 'absolute', \n//             zIndex: 1000, \n//             width: '100%', \n//             backgroundColor: 'white', \n//             borderRadius: '4px', \n//             boxShadow: '0 2px 6px rgba(0,0,0,0.3)', \n//             marginTop: '2px', \n//             padding: '8px 0', \n//             maxHeight: '200px', \n//             overflowY: 'auto',\n//             listStyle: 'none',\n//           }}\n//         >\n//           {data.map((suggestion) => (\n//             <li \n//               key={suggestion.place_id}\n//               onClick={handleSelect(suggestion)}\n//               style={{ \n//                 padding: '8px 16px', \n//                 cursor: 'pointer',\n//                 fontSize: '14px',\n//               }}\n//               onMouseDown={(e) => e.preventDefault()} // Prevent blur\n//               onMouseOver={(e) => {\n//                 e.currentTarget.style.backgroundColor = '#f1f3f4';\n//               }}\n//               onMouseOut={(e) => {\n//                 e.currentTarget.style.backgroundColor = 'transparent';\n//               }}\n//             >\n//               {suggestion.description}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AddressAutocomplete;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWjD,MAAMC,mBAAuD,GAAGA,CAAC;EAC/DC,KAAK;EACLC,EAAE;EACFC,KAAK;EACLC,QAAQ;EACRC,WAAW,GAAG,kBAAkB;EAChCC,QAAQ,GAAG;AACb,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,QAAQ,GAAGX,MAAM,CAAmB,IAAI,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd,MAAMa,gBAAgB,GAAGA,CAAA,KAAM;MAC7B;MACA,IAAI,CAACC,MAAM,CAACC,MAAM,IAAI,CAACD,MAAM,CAACC,MAAM,CAACC,IAAI,IAAI,CAACF,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,EAAE;QACvEC,OAAO,CAACC,IAAI,CAAC,mCAAmC,CAAC;QACjD;MACF;;MAEA;MACA,MAAMC,KAAK,GAAGR,QAAQ,CAACS,OAAO;MAC9B,IAAI,CAACD,KAAK,EAAE;;MAEZ;MACA,MAAME,YAAY,GAAG,IAAIR,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACM,YAAY,CAACH,KAAK,CAAC;;MAEtE;MACAE,YAAY,CAACE,SAAS,CAAC,CAAC,oBAAoB,EAAE,mBAAmB,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;;MAEvF;MACAF,YAAY,CAACG,WAAW,CAAC,eAAe,EAAE,MAAM;QAC9C,MAAMC,KAAK,GAAGJ,YAAY,CAACK,QAAQ,CAAC,CAAC;QACrC,IAAID,KAAK,CAACE,iBAAiB,EAAE;UAC3BpB,QAAQ,CAACkB,KAAK,CAACE,iBAAiB,CAAC;UACjCV,OAAO,CAACW,GAAG,CAAC,iBAAiB,EAAEH,KAAK,CAACE,iBAAiB,CAAC;QACzD;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACAf,gBAAgB,CAAC,CAAC;;IAElB;IACA,OAAO,MAAM;MACX;MACA;IAAA,CACD;EACH,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACEL,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MACE4B,OAAO,EAAEzB,EAAG;MACZ0B,KAAK,EAAE;QAAEC,OAAO,EAAE,OAAO;QAAEC,YAAY,EAAE;MAAM,CAAE;MAAAJ,QAAA,EAEhDzB;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACRnC,OAAA;MACEoC,GAAG,EAAE3B,QAAS;MACd4B,IAAI,EAAC,MAAM;MACXlC,EAAE,EAAEA,EAAG;MACPC,KAAK,EAAEA,KAAM;MACbC,QAAQ,EAAGiC,CAAC,IAAKjC,QAAQ,CAACiC,CAAC,CAACC,MAAM,CAACnC,KAAK,CAAE;MAC1CE,WAAW,EAAEA,WAAY;MACzBC,QAAQ,EAAEA,QAAS;MACnBsB,KAAK,EAAE;QACLW,KAAK,EAAE,MAAM;QACbC,OAAO,EAAE,KAAK;QACdC,YAAY,EAAE,KAAK;QACnBC,MAAM,EAAE;MACV;IAAE;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAzEIP,mBAAuD;AAAA2C,EAAA,GAAvD3C,mBAAuD;AA2E7D,eAAeA,mBAAmB;;AA4BlC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}