{"ast":null,"code":"var _jsxFileName = \"/workspaces/Halfway/halfway/frontend/src/AddressAutoComplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressAutocomplete = ({\n  label,\n  id,\n  value,\n  onChange,\n  placeholder = 'Enter an address',\n  required = false\n}) => {\n  _s();\n  const inputRef = useRef(null);\n  const [autocomplete, setAutocomplete] = useState(null);\n\n  // Initialize autocomplete when the component mounts\n  useEffect(() => {\n    // Don't initialize if Google Maps isn't loaded or if we already have an autocomplete instance\n    if (!window.google || !window.google.maps || !window.google.maps.places || autocomplete) {\n      return;\n    }\n\n    // Initialize autocomplete on the input element\n    if (inputRef.current) {\n      const newAutocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\n        componentRestrictions: {\n          country: 'us'\n        },\n        // Optional: restrict to US addresses\n        fields: ['formatted_address', 'geometry', 'name'],\n        types: ['address']\n      });\n\n      // Add listener for place selection\n      newAutocomplete.addListener('place_changed', () => {\n        const place = newAutocomplete.getPlace();\n        if (place && place.formatted_address) {\n          onChange(place.formatted_address);\n        }\n      });\n      setAutocomplete(newAutocomplete);\n    }\n  }, [window.google, onChange]);\n\n  // Prevent form submission on Enter key (let autocomplete handle it instead)\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      style: {\n        display: 'block',\n        marginBottom: '5px'\n      },\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      id: id,\n      value: value,\n      onChange: e => onChange(e.target.value),\n      onKeyDown: handleKeyDown,\n      required: required,\n      placeholder: placeholder,\n      style: {\n        width: '100%',\n        padding: '8px',\n        borderRadius: '4px',\n        border: '1px solid #ccc'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(AddressAutocomplete, \"K1LrsquO82Vw9Gri1Do6yt7opW4=\");\n_c = AddressAutocomplete;\nexport default AddressAutocomplete;\n\n// import React, { useEffect, useState } from 'react';\n// import usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\n\n// interface AddressAutocompleteProps {\n//   label: string;\n//   id: string;\n//   value: string;\n//   onChange: (value: string) => void;\n//   placeholder?: string;\n//   required?: boolean;\n// }\n\n// const AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n//   label,\n//   id,\n//   value,\n//   onChange,\n//   placeholder = 'Enter an address',\n//   required = false,\n// }) => {\n//   const {\n//     ready,\n//     value: inputValue,\n//     suggestions: { status, data },\n//     setValue,\n//     clearSuggestions,\n//   } = usePlacesAutocomplete({\n//     requestOptions: {\n//       /* Define search scope here - e.g. country restrictions */\n//       componentRestrictions: { country: 'us' }, // Limit to US addresses - modify as needed\n//     },\n//     debounce: 300,\n//   });\n\n//   const [showSuggestions, setShowSuggestions] = useState(false);\n\n//   // Sync external value with internal input state\n//   useEffect(() => {\n//     setValue(value, false);\n//   }, [value, setValue]);\n\n//   const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//     onChange(e.target.value);\n//     setShowSuggestions(true);\n//   };\n\n//   const handleSelect = (suggestion: google.maps.places.AutocompletePrediction) => () => {\n//     // Update the value of the input\n//     setValue(suggestion.description, false);\n//     onChange(suggestion.description);\n//     setShowSuggestions(false);\n//     clearSuggestions();\n//   };\n\n//   return (\n//     <div className='address-autocomplete' style={{ position: 'relative' }}>\n//       <label \n//         htmlFor={id}\n//         style={{ display: 'block', marginBottom: '5px' }}\n//       >\n//         {label}\n//       </label>\n//       <input\n//         type='text'\n//         id={id}\n//         value={inputValue}\n//         onChange={handleInput}\n//         disabled={!ready}\n//         required={required}\n//         placeholder={placeholder}\n//         style={{ \n//           width: '100%', \n//           padding: '8px', \n//           borderRadius: '4px', \n//           border: '1px solid #ccc',\n//         }}\n//         onFocus={() => setShowSuggestions(true)}\n//         onBlur={() => {\n//           // Delay hiding suggestions to allow for selection\n//           setTimeout(() => setShowSuggestions(false), 200);\n//         }}\n//       />\n\n//       {/* Suggestions dropdown */}\n//       {status === 'OK' && showSuggestions && (\n//         <ul \n//           style={{ \n//             position: 'absolute', \n//             zIndex: 1000, \n//             width: '100%', \n//             backgroundColor: 'white', \n//             borderRadius: '4px', \n//             boxShadow: '0 2px 6px rgba(0,0,0,0.3)', \n//             marginTop: '2px', \n//             padding: '8px 0', \n//             maxHeight: '200px', \n//             overflowY: 'auto',\n//             listStyle: 'none',\n//           }}\n//         >\n//           {data.map((suggestion) => (\n//             <li \n//               key={suggestion.place_id}\n//               onClick={handleSelect(suggestion)}\n//               style={{ \n//                 padding: '8px 16px', \n//                 cursor: 'pointer',\n//                 fontSize: '14px',\n//               }}\n//               onMouseDown={(e) => e.preventDefault()} // Prevent blur\n//               onMouseOver={(e) => {\n//                 e.currentTarget.style.backgroundColor = '#f1f3f4';\n//               }}\n//               onMouseOut={(e) => {\n//                 e.currentTarget.style.backgroundColor = 'transparent';\n//               }}\n//             >\n//               {suggestion.description}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AddressAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"AddressAutocomplete\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","AddressAutocomplete","label","id","value","onChange","placeholder","required","_s","inputRef","autocomplete","setAutocomplete","window","google","maps","places","current","newAutocomplete","Autocomplete","componentRestrictions","country","fields","types","addListener","place","getPlace","formatted_address","handleKeyDown","e","key","preventDefault","children","htmlFor","style","display","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","target","onKeyDown","width","padding","borderRadius","border","_c","$RefreshReg$"],"sources":["/workspaces/Halfway/halfway/frontend/src/AddressAutoComplete.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\ninterface AddressAutocompleteProps {\n  label: string;\n  id: string;\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  required?: boolean;\n}\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nconst AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n  label,\n  id,\n  value,\n  onChange,\n  placeholder = 'Enter an address',\n  required = false,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [autocomplete, setAutocomplete] = useState<google.maps.places.Autocomplete | null>(null);\n\n  // Initialize autocomplete when the component mounts\n  useEffect(() => {\n    // Don't initialize if Google Maps isn't loaded or if we already have an autocomplete instance\n    if (!window.google || !window.google.maps || !window.google.maps.places || autocomplete) {\n      return;\n    }\n\n    // Initialize autocomplete on the input element\n    if (inputRef.current) {\n      const newAutocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\n        componentRestrictions: { country: 'us' }, // Optional: restrict to US addresses\n        fields: ['formatted_address', 'geometry', 'name'],\n        types: ['address'],\n      });\n\n      // Add listener for place selection\n      newAutocomplete.addListener('place_changed', () => {\n        const place = newAutocomplete.getPlace();\n        if (place && place.formatted_address) {\n          onChange(place.formatted_address);\n        }\n      });\n\n      setAutocomplete(newAutocomplete);\n    }\n  }, [window.google, onChange]);\n\n  // Prevent form submission on Enter key (let autocomplete handle it instead)\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <div>\n      <label \n        htmlFor={id}\n        style={{ display: 'block', marginBottom: '5px' }}\n      >\n        {label}\n      </label>\n      <input\n        ref={inputRef}\n        type='text'\n        id={id}\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        onKeyDown={handleKeyDown}\n        required={required}\n        placeholder={placeholder}\n        style={{ \n          width: '100%', \n          padding: '8px', \n          borderRadius: '4px', \n          border: '1px solid #ccc',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default AddressAutocomplete;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\n\n// interface AddressAutocompleteProps {\n//   label: string;\n//   id: string;\n//   value: string;\n//   onChange: (value: string) => void;\n//   placeholder?: string;\n//   required?: boolean;\n// }\n\n// const AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n//   label,\n//   id,\n//   value,\n//   onChange,\n//   placeholder = 'Enter an address',\n//   required = false,\n// }) => {\n//   const {\n//     ready,\n//     value: inputValue,\n//     suggestions: { status, data },\n//     setValue,\n//     clearSuggestions,\n//   } = usePlacesAutocomplete({\n//     requestOptions: {\n//       /* Define search scope here - e.g. country restrictions */\n//       componentRestrictions: { country: 'us' }, // Limit to US addresses - modify as needed\n//     },\n//     debounce: 300,\n//   });\n  \n//   const [showSuggestions, setShowSuggestions] = useState(false);\n\n//   // Sync external value with internal input state\n//   useEffect(() => {\n//     setValue(value, false);\n//   }, [value, setValue]);\n\n//   const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//     onChange(e.target.value);\n//     setShowSuggestions(true);\n//   };\n\n//   const handleSelect = (suggestion: google.maps.places.AutocompletePrediction) => () => {\n//     // Update the value of the input\n//     setValue(suggestion.description, false);\n//     onChange(suggestion.description);\n//     setShowSuggestions(false);\n//     clearSuggestions();\n//   };\n\n//   return (\n//     <div className='address-autocomplete' style={{ position: 'relative' }}>\n//       <label \n//         htmlFor={id}\n//         style={{ display: 'block', marginBottom: '5px' }}\n//       >\n//         {label}\n//       </label>\n//       <input\n//         type='text'\n//         id={id}\n//         value={inputValue}\n//         onChange={handleInput}\n//         disabled={!ready}\n//         required={required}\n//         placeholder={placeholder}\n//         style={{ \n//           width: '100%', \n//           padding: '8px', \n//           borderRadius: '4px', \n//           border: '1px solid #ccc',\n//         }}\n//         onFocus={() => setShowSuggestions(true)}\n//         onBlur={() => {\n//           // Delay hiding suggestions to allow for selection\n//           setTimeout(() => setShowSuggestions(false), 200);\n//         }}\n//       />\n\n//       {/* Suggestions dropdown */}\n//       {status === 'OK' && showSuggestions && (\n//         <ul \n//           style={{ \n//             position: 'absolute', \n//             zIndex: 1000, \n//             width: '100%', \n//             backgroundColor: 'white', \n//             borderRadius: '4px', \n//             boxShadow: '0 2px 6px rgba(0,0,0,0.3)', \n//             marginTop: '2px', \n//             padding: '8px 0', \n//             maxHeight: '200px', \n//             overflowY: 'auto',\n//             listStyle: 'none',\n//           }}\n//         >\n//           {data.map((suggestion) => (\n//             <li \n//               key={suggestion.place_id}\n//               onClick={handleSelect(suggestion)}\n//               style={{ \n//                 padding: '8px 16px', \n//                 cursor: 'pointer',\n//                 fontSize: '14px',\n//               }}\n//               onMouseDown={(e) => e.preventDefault()} // Prevent blur\n//               onMouseOver={(e) => {\n//                 e.currentTarget.style.backgroundColor = '#f1f3f4';\n//               }}\n//               onMouseOut={(e) => {\n//                 e.currentTarget.style.backgroundColor = 'transparent';\n//               }}\n//             >\n//               {suggestion.description}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AddressAutocomplete;"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}