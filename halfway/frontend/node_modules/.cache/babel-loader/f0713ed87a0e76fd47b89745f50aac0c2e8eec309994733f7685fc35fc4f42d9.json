{"ast":null,"code":"var _jsxFileName = \"/workspaces/Halfway/halfway/frontend/src/AutoComplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport usePlacesAutocomplete from 'use-places-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressAutocomplete = ({\n  label,\n  id,\n  value,\n  onChange,\n  placeholder = 'Enter an address',\n  required = false\n}) => {\n  _s();\n  const {\n    ready,\n    value: inputValue,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here - e.g. country restrictions */\n      componentRestrictions: {\n        country: 'us'\n      } // Limit to US addresses - modify as needed\n    },\n    debounce: 300\n  });\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  // Sync external value with internal input state\n  useEffect(() => {\n    setValue(value, false);\n  }, [value, setValue]);\n  const handleInput = e => {\n    setValue(e.target.value);\n    onChange(e.target.value);\n    setShowSuggestions(true);\n  };\n  const handleSelect = suggestion => () => {\n    // Update the value of the input\n    setValue(suggestion.description, false);\n    onChange(suggestion.description);\n    setShowSuggestions(false);\n    clearSuggestions();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"address-autocomplete\",\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      style: {\n        display: 'block',\n        marginBottom: '5px'\n      },\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: id,\n      value: inputValue,\n      onChange: handleInput,\n      disabled: !ready,\n      required: required,\n      placeholder: placeholder,\n      style: {\n        width: '100%',\n        padding: '8px',\n        borderRadius: '4px',\n        border: '1px solid #ccc'\n      },\n      onFocus: () => setShowSuggestions(true),\n      onBlur: () => {\n        // Delay hiding suggestions to allow for selection\n        setTimeout(() => setShowSuggestions(false), 200);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), status === 'OK' && showSuggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        position: 'absolute',\n        zIndex: 1000,\n        width: '100%',\n        backgroundColor: 'white',\n        borderRadius: '4px',\n        boxShadow: '0 2px 6px rgba(0,0,0,0.3)',\n        marginTop: '2px',\n        padding: '8px 0',\n        maxHeight: '200px',\n        overflowY: 'auto',\n        listStyle: 'none'\n      },\n      children: data.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: handleSelect(suggestion),\n        style: {\n          padding: '8px 16px',\n          cursor: 'pointer',\n          fontSize: '14px'\n        },\n        onMouseDown: e => e.preventDefault() // Prevent blur\n        ,\n        onMouseOver: e => {\n          e.currentTarget.style.backgroundColor = '#f1f3f4';\n        },\n        onMouseOut: e => {\n          e.currentTarget.style.backgroundColor = 'transparent';\n        },\n        children: suggestion.description\n      }, suggestion.place_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(AddressAutocomplete, \"KJCdPA2wpPc0Tn1SN0Gu5MjNVg0=\", false, function () {\n  return [usePlacesAutocomplete];\n});\n_c = AddressAutocomplete;\nexport default AddressAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"AddressAutocomplete\");","map":{"version":3,"names":["React","useEffect","useState","usePlacesAutocomplete","jsxDEV","_jsxDEV","AddressAutocomplete","label","id","value","onChange","placeholder","required","_s","ready","inputValue","suggestions","status","data","setValue","clearSuggestions","requestOptions","componentRestrictions","country","debounce","showSuggestions","setShowSuggestions","handleInput","e","target","handleSelect","suggestion","description","className","style","position","children","htmlFor","display","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","width","padding","borderRadius","border","onFocus","onBlur","setTimeout","zIndex","backgroundColor","boxShadow","marginTop","maxHeight","overflowY","listStyle","map","onClick","cursor","fontSize","onMouseDown","preventDefault","onMouseOver","currentTarget","onMouseOut","place_id","_c","$RefreshReg$"],"sources":["/workspaces/Halfway/halfway/frontend/src/AutoComplete.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\n\ninterface AddressAutocompleteProps {\n  label: string;\n  id: string;\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  required?: boolean;\n}\n\nconst AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n  label,\n  id,\n  value,\n  onChange,\n  placeholder = 'Enter an address',\n  required = false,\n}) => {\n  const {\n    ready,\n    value: inputValue,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here - e.g. country restrictions */\n      componentRestrictions: { country: 'us' }, // Limit to US addresses - modify as needed\n    },\n    debounce: 300,\n  });\n  \n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  // Sync external value with internal input state\n  useEffect(() => {\n    setValue(value, false);\n  }, [value, setValue]);\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n    onChange(e.target.value);\n    setShowSuggestions(true);\n  };\n\n  const handleSelect = (suggestion: google.maps.places.AutocompletePrediction) => () => {\n    // Update the value of the input\n    setValue(suggestion.description, false);\n    onChange(suggestion.description);\n    setShowSuggestions(false);\n    clearSuggestions();\n  };\n\n  return (\n    <div className='address-autocomplete' style={{ position: 'relative' }}>\n      <label \n        htmlFor={id}\n        style={{ display: 'block', marginBottom: '5px' }}\n      >\n        {label}\n      </label>\n      <input\n        type='text'\n        id={id}\n        value={inputValue}\n        onChange={handleInput}\n        disabled={!ready}\n        required={required}\n        placeholder={placeholder}\n        style={{ \n          width: '100%', \n          padding: '8px', \n          borderRadius: '4px', \n          border: '1px solid #ccc',\n        }}\n        onFocus={() => setShowSuggestions(true)}\n        onBlur={() => {\n          // Delay hiding suggestions to allow for selection\n          setTimeout(() => setShowSuggestions(false), 200);\n        }}\n      />\n\n      {/* Suggestions dropdown */}\n      {status === 'OK' && showSuggestions && (\n        <ul \n          style={{ \n            position: 'absolute', \n            zIndex: 1000, \n            width: '100%', \n            backgroundColor: 'white', \n            borderRadius: '4px', \n            boxShadow: '0 2px 6px rgba(0,0,0,0.3)', \n            marginTop: '2px', \n            padding: '8px 0', \n            maxHeight: '200px', \n            overflowY: 'auto',\n            listStyle: 'none',\n          }}\n        >\n          {data.map((suggestion) => (\n            <li \n              key={suggestion.place_id}\n              onClick={handleSelect(suggestion)}\n              style={{ \n                padding: '8px 16px', \n                cursor: 'pointer',\n                fontSize: '14px',\n              }}\n              onMouseDown={(e) => e.preventDefault()} // Prevent blur\n              onMouseOver={(e) => {\n                e.currentTarget.style.backgroundColor = '#f1f3f4';\n              }}\n              onMouseOut={(e) => {\n                e.currentTarget.style.backgroundColor = 'transparent';\n              }}\n            >\n              {suggestion.description}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default AddressAutocomplete;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}