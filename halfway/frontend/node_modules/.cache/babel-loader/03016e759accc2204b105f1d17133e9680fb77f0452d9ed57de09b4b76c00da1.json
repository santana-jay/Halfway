{"ast":null,"code":"var _jsxFileName = \"/workspaces/Halfway/halfway/frontend/src/MidpointFinder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, Circle } from '@react-google-maps/api';\nimport axios from 'axios';\nimport AddressAutoComplete from './AddressAutoComplete';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Map different suggestion types to colors for visual distinction\nconst typeColors = {\n  restaurant: '#FF5733',\n  cafe: '#C70039',\n  park: '#44BD32',\n  outdoor: '#44BD32',\n  shopping: '#3498DB',\n  museum: '#9B59B6',\n  entertainment: '#F1C40F',\n  sports: '#2E86C1',\n  general: '#7F8C8D',\n  cultural: '#8E44AD',\n  landmark: '#D35400',\n  education: '#16A085',\n  default: '#4285F4'\n};\nconst getTypeColor = type => {\n  return typeColors[type.toLowerCase()] || typeColors.default;\n};\nconst MidpointFinder = () => {\n  _s();\n  const [address1, setAddress1] = useState('');\n  const [address2, setAddress2] = useState('');\n  const [radius, setRadius] = useState(5);\n  const [midpoint, setMidpoint] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const mapContainerStyle = {\n    width: '100%',\n    height: '400px'\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(\"Sending request:\", {\n        address1,\n        address2,\n        radius\n      });\n\n      // Use relative URL with proxy from package.json\n      const res = await axios.post('/api/midpoint/', {\n        address1,\n        address2,\n        radius // Include radius in the request\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(\"API Response:\", res.data);\n      if (res.data && res.data.midpoint) {\n        setMidpoint(res.data.midpoint);\n        setSuggestions(res.data.suggestions || []);\n      } else {\n        throw new Error(\"Invalid response format\");\n      }\n    } catch (error) {\n      console.error('Error finding midpoint:', error);\n\n      // Extract error message if available\n      let errorMsg = 'Failed to find midpoint. Please try different addresses or try again later.';\n      if (error.response && error.response.data && error.response.data.error) {\n        errorMsg = error.response.data.error;\n      }\n      setError(errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"midpoint-finder\",\n    style: {\n      maxWidth: '800px',\n      margin: '0 auto',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Halfway\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Find the perfect place to meet your friends in the middle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        style: {\n          marginBottom: '15px'\n        },\n        children: /*#__PURE__*/_jsxDEV(AddressAutoComplete, {\n          label: \"Address 1:\",\n          id: \"address1\",\n          value: address1,\n          onChange: setAddress1,\n          placeholder: \"Enter first address\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        style: {\n          marginBottom: '15px'\n        },\n        children: /*#__PURE__*/_jsxDEV(AddressAutoomplete, {\n          label: \"Address 2:\",\n          id: \"address2\",\n          value: address2,\n          onChange: setAddress2,\n          placeholder: \"Enter second address\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        style: {\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"radius\",\n          style: {\n            display: 'block',\n            marginBottom: '5px'\n          },\n          children: [\"Search Radius: \", radius, \" miles\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          id: \"radius\",\n          min: \"1\",\n          max: \"20\",\n          value: radius,\n          onChange: e => setRadius(parseInt(e.target.value)),\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            fontSize: '12px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"1 mile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"20 miles\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        style: {\n          width: '100%',\n          padding: '10px',\n          backgroundColor: '#4285F4',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: loading ? 'not-allowed' : 'pointer'\n        },\n        children: loading ? 'Finding Midpoint...' : 'Find Midpoint'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '20px',\n        textAlign: 'center'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }, this), midpoint && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Meet in the Middle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"midpoint-address\",\n        style: {\n          textAlign: 'center',\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Suggested meeting location: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this), midpoint.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '30px'\n        },\n        children: /*#__PURE__*/_jsxDEV(LoadScript, {\n          googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n          libraries: ['places'],\n          onLoad: () => setIsMapLoaded(true),\n          children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n            mapContainerStyle: mapContainerStyle,\n            center: {\n              lat: midpoint.lat,\n              lng: midpoint.lng\n            },\n            zoom: 12,\n            children: [/*#__PURE__*/_jsxDEV(Marker, {\n              position: {\n                lat: midpoint.lat,\n                lng: midpoint.lng\n              },\n              label: {\n                text: 'M',\n                color: 'white',\n                fontWeight: 'bold'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Circle, {\n              center: {\n                lat: midpoint.lat,\n                lng: midpoint.lng\n              },\n              radius: radius * 1609.34 // Convert miles to meters\n              ,\n              options: {\n                fillColor: '#4285F4',\n                fillOpacity: 0.1,\n                strokeColor: '#4285F4',\n                strokeOpacity: 0.8,\n                strokeWeight: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [\"Things to do within \", radius, \" miles\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this), suggestions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"No suggestions available for this location.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions-filter\",\n          style: {\n            marginBottom: '20px',\n            textAlign: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '14px',\n              marginBottom: '10px'\n            },\n            children: [\"Showing \", suggestions.length, \" recommendations near \", midpoint.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions\",\n          style: {\n            display: 'grid',\n            gridTemplateColumns: '1fr 1fr',\n            gap: '15px'\n          },\n          children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-card\",\n            style: {\n              padding: '15px',\n              borderRadius: '8px',\n              boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n              backgroundColor: '#f8f9fa',\n              borderLeft: `4px solid ${getTypeColor(suggestion.type)}`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginTop: 0,\n                marginBottom: '8px'\n              },\n              children: suggestion.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '14px',\n                margin: '0 0 10px 0'\n              },\n              children: suggestion.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tag\",\n              style: {\n                display: 'inline-block',\n                padding: '4px 8px',\n                backgroundColor: getTypeColor(suggestion.type),\n                color: 'white',\n                borderRadius: '4px',\n                fontSize: '12px',\n                textTransform: 'capitalize'\n              },\n              children: suggestion.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(MidpointFinder, \"OGP3C9HUAw3BzwEBj+85/A6zNvw=\");\n_c = MidpointFinder;\nexport default MidpointFinder;\n\n// import { GoogleMap, LoadScript, Marker, useLoadScript } from '@react-google-maps/api';\n// import axios from 'axios';\n// import Autocomplete from './AutoComplete';\n\n// // Define libraries for Google Maps\n// const libraries: ['places'] = [\"places\"];\n\n// interface Suggestion {\n//     name: string;\n//     description: string;\n//     type: string;\n// }\n\n// interface MidpointResponse {\n//     midpoint: {\n//         lat: number;\n//         lng: number;\n//         address: string;\n//     };\n//     suggestions: Suggestion[];\n// }\n\n// const MidpointFinder: React.FC = () => {\n//     const [address1, setAddress1] = useState('');\n//     const [address2, setAddress2] = useState('');\n//     const [midpoint, setMidpoint] = useState<{ lat: number; lng: number; address: string } | null>(null);\n//     const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState<string | null>(null);\n\n//     const mapContainerStyle = {\n//         width: '100%',\n//         height: '400px'\n//     };\n\n//     const { isLoaded } = useLoadScript({\n//         googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n//         libraries,\n//     });\n\n//     const handleSubmit = async (e: React.FormEvent) => {\n//         e.preventDefault();\n//         setLoading(true);\n//         setError(null);\n\n//         try {\n//             console.log(\"Sending addresses:\", { address1, address2 });\n\n//             const res = await axios.post<MidpointResponse>('/api/midpoint/', {\n//                 address1,\n//                 address2\n//             });\n\n//             console.log(\"API Response:\", res.data);\n\n//             setMidpoint(res.data.midpoint);\n//             setSuggestions(res.data.suggestions);\n//         } catch (error: any) {\n//             console.error('Error finding midpoint:', error);\n\n//             // Extract error message if available\n//             let errorMsg = 'Failed to find midpoint. Please try different addresses or try again later.';\n//             if (error.response && error.response.data && error.response.data.error) {\n//                 errorMsg = error.response.data.error;\n//             }\n\n//             setError(errorMsg);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     if (!isLoaded) {\n//         return <div>Loading Google Maps...</div>;\n//     }\n\n//     return (\n//         <div className='midpoint-finder' style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>\n//             <h1 style={{ textAlign: 'center' }}>Halfway</h1>\n//             <p style={{ textAlign: 'center' }}>Find the perfect place to meet your friends in the middle</p>\n\n//             <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n//                 <div className='form-group' style={{ marginBottom: '15px' }}>\n//                     <Autocomplete\n//                         label=\"Address 1:\"\n//                         id=\"address1\"\n//                         value={address1}\n//                         onChange={setAddress1}\n//                         required\n//                         placeholder=\"Enter first address\"\n//                     />\n//                 </div>\n//                 <div className='form-group' style={{ marginBottom: '15px' }}>\n//                     <Autocomplete\n//                         label=\"Address 2:\"\n//                         id=\"address2\"\n//                         value={address2}\n//                         onChange={setAddress2}\n//                         required\n//                         placeholder=\"Enter second address\"\n//                     />\n//                 </div>\n//                 <button \n//                     type='submit' \n//                     disabled={loading}\n//                     style={{ \n//                         width: '100%', \n//                         padding: '10px', \n//                         backgroundColor: '#4285F4', \n//                         color: 'white', \n//                         border: 'none', \n//                         borderRadius: '4px',\n//                         cursor: loading ? 'not-allowed' : 'pointer'\n//                     }}\n//                 >\n//                     {loading ? 'Finding Midpoint...' : 'Find Midpoint'}\n//                 </button>\n//             </form>\n\n//             {error && (\n//                 <div style={{ color: 'red', marginBottom: '20px', textAlign: 'center' }}>\n//                     {error}\n//                 </div>\n//             )}\n\n//             {midpoint && (\n//                 <div className='results'>\n//                     <h2 style={{ textAlign: 'center' }}>Meet in the Middle</h2>\n//                     <p className='midpoint-address' style={{ textAlign: 'center', marginBottom: '20px' }}>\n//                         <strong>Suggested meeting location: </strong>\n//                         {midpoint.address}\n//                     </p>\n\n//                     <div style={{ marginBottom: '30px' }}>\n//                         <GoogleMap\n//                             mapContainerStyle={mapContainerStyle}\n//                             center={{ lat: midpoint.lat, lng: midpoint.lng }}\n//                             zoom={13}\n//                         >\n//                             <Marker position={{ lat: midpoint.lat, lng: midpoint.lng }} />\n//                         </GoogleMap>\n//                     </div>\n\n//                     <h3 style={{ textAlign: 'center' }}>Things to do in the area:</h3>\n//                     <div className='suggestions' style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>\n//                         {suggestions.map((suggestion, index) => (\n//                             <div \n//                                 key={index} \n//                                 className='suggestion-card'\n//                                 style={{ \n//                                     padding: '15px', \n//                                     borderRadius: '8px',\n//                                     boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n//                                     backgroundColor: '#f8f9fa'\n//                                 }}\n//                             >\n//                                 <h4 style={{ marginTop: 0 }}>{suggestion.name}</h4>\n//                                 <p>{suggestion.description}</p>\n//                                 <span \n//                                     className='tag'\n//                                     style={{ \n//                                         display: 'inline-block',\n//                                         padding: '4px 8px',\n//                                         backgroundColor: '#4285F4',\n//                                         color: 'white',\n//                                         borderRadius: '4px',\n//                                         fontSize: '12px'\n//                                     }}\n//                                 >\n//                                     {suggestion.type}\n//                                 </span>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default MidpointFinder;\n\n// import React, { useState } from 'react';\n// import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n// import axios from 'axios';\n\n// interface Suggestion {\n//     name: string;\n//     description: string;\n//     type: string;\n// }\n\n// interface MidpointResponse {\n//     midpoint: {\n//         lat: number;\n//         lng: number;\n//         address: string;\n//     }\n//     // status: string;\n//     suggestions: Suggestion[];\n// }\n\n// const MidpointFinder: React.FC = () => {\n//     const [address1, setAddress1] = useState('');\n//     const [address2, setAddress2] = useState('');\n//     const [midpoint, setMidpoint] = useState<{ lat: number; lng: number; address: string } | null>(null);\n//     const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState<string | null>(null)\n\n//     const handleSubmit = async (e: React.FormEvent) => {\n//         e.preventDefault();\n//         setLoading(true);\n//         setError(null);\n\n//         try {\n//             const res = await axios.post<MidpointResponse>('/api/midpoint/', {\n//                 address1,\n//                 address2\n//             });\n//             setMidpoint(res.data.midpoint);\n//             setSuggestions(res.data.suggestions);\n//         } catch (error) {\n//             console.error('Error finding midpoint:', error);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     const mapContainerStyle = {\n//         width: '100%',\n//         height: '400px'\n//     };\n\n//     // const center = midpoint ? { lat: midpoint.lat, lng: midpoint.lng } : { lat: 0, lng: 0 };\n\n//     return (\n//         <div className='midpoint-finder' style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>\n//             <h1 style={{ textAlign: 'center' }}>Halfway</h1>\n//             <p style={{ textAlign: 'center' }}>Find the perfect place to meet your friends in the middle</p>\n\n//             <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n//                 <div className='form-group' style={{ marginBottom: '15px' }}>\n//                     <label htmlFor='address1' style={{ display: 'block', marginBottom: '5px' }}>Address 1:</label>\n//                     <input\n//                         type='text'\n//                         id='address1'\n//                         value={address1}\n//                         onChange={(e) => setAddress1(e.target.value)}\n//                         required\n//                         placeholder='Enter first address'\n//                         style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//                     />\n//                 </div>\n//                 <div className='form-group' style={{ marginBottom: '15px' }}>\n//                     <label htmlFor='address2' style={{ display: 'block', marginBottom: '5px' }}>Address 2:</label>\n//                     <input\n//                         type='text'\n//                         id='address2'\n//                         value={address2}\n//                         onChange={(e) => setAddress2(e.target.value)}\n//                         required\n//                         placeholder='Enter second address'\n//                         style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//                     />\n//                 </div>\n//                 <button \n//                     type='submit' \n//                     disabled={loading}\n//                     style={{ \n//                         width: '100%', \n//                         padding: '10px', \n//                         backgroundColor: '#4285F4', \n//                         color: 'white', \n//                         border: 'none', \n//                         borderRadius: '4px',\n//                         cursor: loading ? 'not-allowed' : 'pointer'\n//                     }}\n//                 >\n//                     {loading ? 'Finding Midpoint...' : 'Find Midpoint'}\n//                 </button>\n//             </form>\n\n//             {error && (\n//                 <div style={{ color: 'red', marginBottom: '20px', textAlign: 'center' }}>\n//                     {error}\n//                 </div>\n//             )}\n\n//             {midpoint && (\n//                 <div className='results'>\n//                     <h2 style={{ textAlign: 'center' }}>Meet in the Middle</h2>\n//                     <p className='midpoint-address' style={{ textAlign: 'center', marginBottom: '20px' }}>\n//                         <strong>Suggested meeting location: </strong>\n//                         {midpoint.address}\n//                     </p>\n\n//                     <div style={{ marginBottom: '30px' }}>\n//                         <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || ''}>\n//                             <GoogleMap\n//                                 mapContainerStyle={mapContainerStyle}\n//                                 center={{ lat: midpoint.lat, lng: midpoint.lng }}\n//                                 zoom={13}\n//                             >\n//                                 <Marker position={{ lat: midpoint.lat, lng: midpoint.lng }} />\n//                             </GoogleMap>\n//                         </LoadScript>\n//                     </div>\n\n//                     <h3 style={{ textAlign: 'center' }}>Things to do in the area:</h3>\n//                     <div className='suggestions' style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>\n//                         {suggestions.map((suggestion, index) => (\n//                             <div \n//                                 key={index} \n//                                 className='suggestion-card'\n//                                 style={{ \n//                                     padding: '15px', \n//                                     borderRadius: '8px',\n//                                     boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n//                                     backgroundColor: '#f8f9fa'\n//                                 }}\n//                             >\n//                                 <h4 style={{ marginTop: 0 }}>{suggestion.name}</h4>\n//                                 <p>{suggestion.description}</p>\n//                                 <span \n//                                     className='tag'\n//                                     style={{ \n//                                         display: 'inline-block',\n//                                         padding: '4px 8px',\n//                                         backgroundColor: '#4285F4',\n//                                         color: 'white',\n//                                         borderRadius: '4px',\n//                                         fontSize: '12px'\n//                                     }}\n//                                 >\n//                                     {suggestion.type}\n//                                 </span>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default MidpointFinder;\nvar _c;\n$RefreshReg$(_c, \"MidpointFinder\");","map":{"version":3,"names":["React","useState","GoogleMap","LoadScript","Marker","Circle","axios","AddressAutoComplete","jsxDEV","_jsxDEV","Fragment","_Fragment","typeColors","restaurant","cafe","park","outdoor","shopping","museum","entertainment","sports","general","cultural","landmark","education","default","getTypeColor","type","toLowerCase","MidpointFinder","_s","address1","setAddress1","address2","setAddress2","radius","setRadius","midpoint","setMidpoint","suggestions","setSuggestions","loading","setLoading","error","setError","isMapLoaded","setIsMapLoaded","mapContainerStyle","width","height","handleSubmit","e","preventDefault","console","log","res","post","headers","data","Error","errorMsg","response","className","style","maxWidth","margin","padding","children","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","marginBottom","label","id","value","onChange","placeholder","required","AddressAutoomplete","htmlFor","display","min","max","parseInt","target","justifyContent","fontSize","disabled","backgroundColor","color","border","borderRadius","cursor","address","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","libraries","onLoad","center","lat","lng","zoom","position","text","fontWeight","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","length","gridTemplateColumns","gap","map","suggestion","index","boxShadow","borderLeft","marginTop","name","description","textTransform","_c","$RefreshReg$"],"sources":["/workspaces/Halfway/halfway/frontend/src/MidpointFinder.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker, Circle } from '@react-google-maps/api';\nimport axios from 'axios';\nimport AddressAutoComplete from './AddressAutoComplete';\n\ninterface Suggestion {\n    name: string;\n    description: string;\n    type: string;\n}\n\ninterface MidpointResponse {\n    midpoint: {\n        lat: number;\n        lng: number;\n        address: string;\n    };\n    suggestions: Suggestion[];\n}\n\n// Map different suggestion types to colors for visual distinction\nconst typeColors: Record<string, string> = {\n    restaurant: '#FF5733',\n    cafe: '#C70039',\n    park: '#44BD32',\n    outdoor: '#44BD32',\n    shopping: '#3498DB',\n    museum: '#9B59B6',\n    entertainment: '#F1C40F',\n    sports: '#2E86C1',\n    general: '#7F8C8D',\n    cultural: '#8E44AD',\n    landmark: '#D35400',\n    education: '#16A085',\n    default: '#4285F4'\n};\n\nconst getTypeColor = (type: string): string => {\n    return typeColors[type.toLowerCase()] || typeColors.default;\n};\n\nconst MidpointFinder: React.FC = () => {\n    const [address1, setAddress1] = useState('');\n    const [address2, setAddress2] = useState('');\n    const [radius, setRadius] = useState(5);\n    const [midpoint, setMidpoint] = useState<{ lat: number; lng: number; address: string } | null>(null);\n    const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [isMapLoaded, setIsMapLoaded] = useState(false);\n\n    const mapContainerStyle = {\n        width: '100%',\n        height: '400px'\n    };\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        setLoading(true);\n        setError(null);\n\n        try {\n            console.log(\"Sending request:\", { address1, address2, radius });\n            \n            // Use relative URL with proxy from package.json\n            const res = await axios.post<MidpointResponse>('/api/midpoint/', {\n                address1,\n                address2,\n                radius // Include radius in the request\n            }, {\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            });\n            \n            console.log(\"API Response:\", res.data);\n            \n            if (res.data && res.data.midpoint) {\n                setMidpoint(res.data.midpoint);\n                setSuggestions(res.data.suggestions || []);\n            } else {\n                throw new Error(\"Invalid response format\");\n            }\n        } catch (error: any) {\n            console.error('Error finding midpoint:', error);\n            \n            // Extract error message if available\n            let errorMsg = 'Failed to find midpoint. Please try different addresses or try again later.';\n            if (error.response && error.response.data && error.response.data.error) {\n                errorMsg = error.response.data.error;\n            }\n            \n            setError(errorMsg);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className='midpoint-finder' style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>\n            <h1 style={{ textAlign: 'center' }}>Halfway</h1>\n            <p style={{ textAlign: 'center' }}>Find the perfect place to meet your friends in the middle</p>\n\n            <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n                <div className='form-group' style={{ marginBottom: '15px' }}>\n                    <AddressAutoComplete\n                        label=\"Address 1:\"\n                        id=\"address1\"\n                        value={address1}\n                        onChange={setAddress1}\n                        placeholder=\"Enter first address\"\n                        required\n                    />\n                </div>\n                <div className='form-group' style={{ marginBottom: '15px' }}>\n                    <AddressAutoomplete\n                        label=\"Address 2:\"\n                        id=\"address2\"\n                        value={address2}\n                        onChange={setAddress2}\n                        placeholder=\"Enter second address\"\n                        required\n                    />\n                </div>\n                <div className='form-group' style={{ marginBottom: '15px' }}>\n                    <label htmlFor='radius' style={{ display: 'block', marginBottom: '5px' }}>\n                        Search Radius: {radius} miles\n                    </label>\n                    <input\n                        type='range'\n                        id='radius'\n                        min='1'\n                        max='20'\n                        value={radius}\n                        onChange={(e) => setRadius(parseInt(e.target.value))}\n                        style={{ width: '100%' }}\n                    />\n                    <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '12px' }}>\n                        <span>1 mile</span>\n                        <span>20 miles</span>\n                    </div>\n                </div>\n                <button \n                    type='submit' \n                    disabled={loading}\n                    style={{ \n                        width: '100%', \n                        padding: '10px', \n                        backgroundColor: '#4285F4', \n                        color: 'white', \n                        border: 'none', \n                        borderRadius: '4px',\n                        cursor: loading ? 'not-allowed' : 'pointer'\n                    }}\n                >\n                    {loading ? 'Finding Midpoint...' : 'Find Midpoint'}\n                </button>\n            </form>\n\n            {error && (\n                <div style={{ color: 'red', marginBottom: '20px', textAlign: 'center' }}>\n                    {error}\n                </div>\n            )}\n\n            {midpoint && (\n                <div className='results'>\n                    <h2 style={{ textAlign: 'center' }}>Meet in the Middle</h2>\n                    <p className='midpoint-address' style={{ textAlign: 'center', marginBottom: '20px' }}>\n                        <strong>Suggested meeting location: </strong>\n                        {midpoint.address}\n                    </p>\n\n                    <div style={{ marginBottom: '30px' }}>\n                        <LoadScript \n                            googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || ''} \n                            libraries={['places']}\n                            onLoad={() => setIsMapLoaded(true)}\n                        >\n                            <GoogleMap\n                                mapContainerStyle={mapContainerStyle}\n                                center={{ lat: midpoint.lat, lng: midpoint.lng }}\n                                zoom={12}\n                            >\n                                <Marker \n                                    position={{ lat: midpoint.lat, lng: midpoint.lng }} \n                                    label={{\n                                        text: 'M',\n                                        color: 'white',\n                                        fontWeight: 'bold'\n                                    }}\n                                />\n                                {/* Add a circle to show the search radius */}\n                                <Circle\n                                    center={{ lat: midpoint.lat, lng: midpoint.lng }}\n                                    radius={radius * 1609.34} // Convert miles to meters\n                                    options={{\n                                        fillColor: '#4285F4',\n                                        fillOpacity: 0.1,\n                                        strokeColor: '#4285F4',\n                                        strokeOpacity: 0.8,\n                                        strokeWeight: 2,\n                                    }}\n                                />\n                            </GoogleMap>\n                        </LoadScript>\n                    </div>\n\n                    <h3 style={{ textAlign: 'center' }}>\n                        Things to do within {radius} miles\n                    </h3>\n                    {suggestions.length === 0 ? (\n                        <p style={{ textAlign: 'center' }}>No suggestions available for this location.</p>\n                    ) : (\n                        <>\n                            <div className='suggestions-filter' style={{ marginBottom: '20px', textAlign: 'center' }}>\n                                <p style={{ fontSize: '14px', marginBottom: '10px' }}>\n                                    Showing {suggestions.length} recommendations near {midpoint.address}\n                                </p>\n                            </div>\n                            <div className='suggestions' style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>\n                                {suggestions.map((suggestion, index) => (\n                                    <div \n                                        key={index} \n                                        className='suggestion-card'\n                                        style={{ \n                                            padding: '15px', \n                                            borderRadius: '8px',\n                                            boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n                                            backgroundColor: '#f8f9fa',\n                                            borderLeft: `4px solid ${getTypeColor(suggestion.type)}`\n                                        }}\n                                    >\n                                        <h4 style={{ marginTop: 0, marginBottom: '8px' }}>{suggestion.name}</h4>\n                                        <p style={{ fontSize: '14px', margin: '0 0 10px 0' }}>{suggestion.description}</p>\n                                        <span \n                                            className='tag'\n                                            style={{ \n                                                display: 'inline-block',\n                                                padding: '4px 8px',\n                                                backgroundColor: getTypeColor(suggestion.type),\n                                                color: 'white',\n                                                borderRadius: '4px',\n                                                fontSize: '12px',\n                                                textTransform: 'capitalize'\n                                            }}\n                                        >\n                                            {suggestion.type}\n                                        </span>\n                                    </div>\n                                ))}\n                            </div>\n                        </>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default MidpointFinder;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { GoogleMap, LoadScript, Marker, useLoadScript } from '@react-google-maps/api';\n// import axios from 'axios';\n// import Autocomplete from './AutoComplete';\n\n// // Define libraries for Google Maps\n// const libraries: ['places'] = [\"places\"];\n\n// interface Suggestion {\n//     name: string;\n//     description: string;\n//     type: string;\n// }\n\n// interface MidpointResponse {\n//     midpoint: {\n//         lat: number;\n//         lng: number;\n//         address: string;\n//     };\n//     suggestions: Suggestion[];\n// }\n\n// const MidpointFinder: React.FC = () => {\n//     const [address1, setAddress1] = useState('');\n//     const [address2, setAddress2] = useState('');\n//     const [midpoint, setMidpoint] = useState<{ lat: number; lng: number; address: string } | null>(null);\n//     const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState<string | null>(null);\n\n//     const mapContainerStyle = {\n//         width: '100%',\n//         height: '400px'\n//     };\n\n//     const { isLoaded } = useLoadScript({\n//         googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n//         libraries,\n//     });\n\n//     const handleSubmit = async (e: React.FormEvent) => {\n//         e.preventDefault();\n//         setLoading(true);\n//         setError(null);\n\n//         try {\n//             console.log(\"Sending addresses:\", { address1, address2 });\n            \n//             const res = await axios.post<MidpointResponse>('/api/midpoint/', {\n//                 address1,\n//                 address2\n//             });\n            \n//             console.log(\"API Response:\", res.data);\n            \n//             setMidpoint(res.data.midpoint);\n//             setSuggestions(res.data.suggestions);\n//         } catch (error: any) {\n//             console.error('Error finding midpoint:', error);\n            \n//             // Extract error message if available\n//             let errorMsg = 'Failed to find midpoint. Please try different addresses or try again later.';\n//             if (error.response && error.response.data && error.response.data.error) {\n//                 errorMsg = error.response.data.error;\n//             }\n            \n//             setError(errorMsg);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     if (!isLoaded) {\n//         return <div>Loading Google Maps...</div>;\n//     }\n\n//     return (\n//         <div className='midpoint-finder' style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>\n//             <h1 style={{ textAlign: 'center' }}>Halfway</h1>\n//             <p style={{ textAlign: 'center' }}>Find the perfect place to meet your friends in the middle</p>\n\n//             <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n//                 <div className='form-group' style={{ marginBottom: '15px' }}>\n//                     <Autocomplete\n//                         label=\"Address 1:\"\n//                         id=\"address1\"\n//                         value={address1}\n//                         onChange={setAddress1}\n//                         required\n//                         placeholder=\"Enter first address\"\n//                     />\n//                 </div>\n//                 <div className='form-group' style={{ marginBottom: '15px' }}>\n//                     <Autocomplete\n//                         label=\"Address 2:\"\n//                         id=\"address2\"\n//                         value={address2}\n//                         onChange={setAddress2}\n//                         required\n//                         placeholder=\"Enter second address\"\n//                     />\n//                 </div>\n//                 <button \n//                     type='submit' \n//                     disabled={loading}\n//                     style={{ \n//                         width: '100%', \n//                         padding: '10px', \n//                         backgroundColor: '#4285F4', \n//                         color: 'white', \n//                         border: 'none', \n//                         borderRadius: '4px',\n//                         cursor: loading ? 'not-allowed' : 'pointer'\n//                     }}\n//                 >\n//                     {loading ? 'Finding Midpoint...' : 'Find Midpoint'}\n//                 </button>\n//             </form>\n\n//             {error && (\n//                 <div style={{ color: 'red', marginBottom: '20px', textAlign: 'center' }}>\n//                     {error}\n//                 </div>\n//             )}\n\n//             {midpoint && (\n//                 <div className='results'>\n//                     <h2 style={{ textAlign: 'center' }}>Meet in the Middle</h2>\n//                     <p className='midpoint-address' style={{ textAlign: 'center', marginBottom: '20px' }}>\n//                         <strong>Suggested meeting location: </strong>\n//                         {midpoint.address}\n//                     </p>\n\n//                     <div style={{ marginBottom: '30px' }}>\n//                         <GoogleMap\n//                             mapContainerStyle={mapContainerStyle}\n//                             center={{ lat: midpoint.lat, lng: midpoint.lng }}\n//                             zoom={13}\n//                         >\n//                             <Marker position={{ lat: midpoint.lat, lng: midpoint.lng }} />\n//                         </GoogleMap>\n//                     </div>\n\n//                     <h3 style={{ textAlign: 'center' }}>Things to do in the area:</h3>\n//                     <div className='suggestions' style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>\n//                         {suggestions.map((suggestion, index) => (\n//                             <div \n//                                 key={index} \n//                                 className='suggestion-card'\n//                                 style={{ \n//                                     padding: '15px', \n//                                     borderRadius: '8px',\n//                                     boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n//                                     backgroundColor: '#f8f9fa'\n//                                 }}\n//                             >\n//                                 <h4 style={{ marginTop: 0 }}>{suggestion.name}</h4>\n//                                 <p>{suggestion.description}</p>\n//                                 <span \n//                                     className='tag'\n//                                     style={{ \n//                                         display: 'inline-block',\n//                                         padding: '4px 8px',\n//                                         backgroundColor: '#4285F4',\n//                                         color: 'white',\n//                                         borderRadius: '4px',\n//                                         fontSize: '12px'\n//                                     }}\n//                                 >\n//                                     {suggestion.type}\n//                                 </span>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default MidpointFinder;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n// import axios from 'axios';\n\n// interface Suggestion {\n//     name: string;\n//     description: string;\n//     type: string;\n// }\n\n// interface MidpointResponse {\n//     midpoint: {\n//         lat: number;\n//         lng: number;\n//         address: string;\n//     }\n//     // status: string;\n//     suggestions: Suggestion[];\n// }\n\n\n// const MidpointFinder: React.FC = () => {\n//     const [address1, setAddress1] = useState('');\n//     const [address2, setAddress2] = useState('');\n//     const [midpoint, setMidpoint] = useState<{ lat: number; lng: number; address: string } | null>(null);\n//     const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState<string | null>(null)\n\n//     const handleSubmit = async (e: React.FormEvent) => {\n//         e.preventDefault();\n//         setLoading(true);\n//         setError(null);\n\n//         try {\n//             const res = await axios.post<MidpointResponse>('/api/midpoint/', {\n//                 address1,\n//                 address2\n//             });\n//             setMidpoint(res.data.midpoint);\n//             setSuggestions(res.data.suggestions);\n//         } catch (error) {\n//             console.error('Error finding midpoint:', error);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n\n//     const mapContainerStyle = {\n//         width: '100%',\n//         height: '400px'\n//     };\n\n//     // const center = midpoint ? { lat: midpoint.lat, lng: midpoint.lng } : { lat: 0, lng: 0 };\n\n//     return (\n//         <div className='midpoint-finder' style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>\n//             <h1 style={{ textAlign: 'center' }}>Halfway</h1>\n//             <p style={{ textAlign: 'center' }}>Find the perfect place to meet your friends in the middle</p>\n\n//             <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n//                 <div className='form-group' style={{ marginBottom: '15px' }}>\n//                     <label htmlFor='address1' style={{ display: 'block', marginBottom: '5px' }}>Address 1:</label>\n//                     <input\n//                         type='text'\n//                         id='address1'\n//                         value={address1}\n//                         onChange={(e) => setAddress1(e.target.value)}\n//                         required\n//                         placeholder='Enter first address'\n//                         style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//                     />\n//                 </div>\n//                 <div className='form-group' style={{ marginBottom: '15px' }}>\n//                     <label htmlFor='address2' style={{ display: 'block', marginBottom: '5px' }}>Address 2:</label>\n//                     <input\n//                         type='text'\n//                         id='address2'\n//                         value={address2}\n//                         onChange={(e) => setAddress2(e.target.value)}\n//                         required\n//                         placeholder='Enter second address'\n//                         style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//                     />\n//                 </div>\n//                 <button \n//                     type='submit' \n//                     disabled={loading}\n//                     style={{ \n//                         width: '100%', \n//                         padding: '10px', \n//                         backgroundColor: '#4285F4', \n//                         color: 'white', \n//                         border: 'none', \n//                         borderRadius: '4px',\n//                         cursor: loading ? 'not-allowed' : 'pointer'\n//                     }}\n//                 >\n//                     {loading ? 'Finding Midpoint...' : 'Find Midpoint'}\n//                 </button>\n//             </form>\n\n//             {error && (\n//                 <div style={{ color: 'red', marginBottom: '20px', textAlign: 'center' }}>\n//                     {error}\n//                 </div>\n//             )}\n\n//             {midpoint && (\n//                 <div className='results'>\n//                     <h2 style={{ textAlign: 'center' }}>Meet in the Middle</h2>\n//                     <p className='midpoint-address' style={{ textAlign: 'center', marginBottom: '20px' }}>\n//                         <strong>Suggested meeting location: </strong>\n//                         {midpoint.address}\n//                     </p>\n\n//                     <div style={{ marginBottom: '30px' }}>\n//                         <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || ''}>\n//                             <GoogleMap\n//                                 mapContainerStyle={mapContainerStyle}\n//                                 center={{ lat: midpoint.lat, lng: midpoint.lng }}\n//                                 zoom={13}\n//                             >\n//                                 <Marker position={{ lat: midpoint.lat, lng: midpoint.lng }} />\n//                             </GoogleMap>\n//                         </LoadScript>\n//                     </div>\n\n//                     <h3 style={{ textAlign: 'center' }}>Things to do in the area:</h3>\n//                     <div className='suggestions' style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>\n//                         {suggestions.map((suggestion, index) => (\n//                             <div \n//                                 key={index} \n//                                 className='suggestion-card'\n//                                 style={{ \n//                                     padding: '15px', \n//                                     borderRadius: '8px',\n//                                     boxShadow: '0 2px 5px rgba(0,0,0,0.1)',\n//                                     backgroundColor: '#f8f9fa'\n//                                 }}\n//                             >\n//                                 <h4 style={{ marginTop: 0 }}>{suggestion.name}</h4>\n//                                 <p>{suggestion.description}</p>\n//                                 <span \n//                                     className='tag'\n//                                     style={{ \n//                                         display: 'inline-block',\n//                                         padding: '4px 8px',\n//                                         backgroundColor: '#4285F4',\n//                                         color: 'white',\n//                                         borderRadius: '4px',\n//                                         fontSize: '12px'\n//                                     }}\n//                                 >\n//                                     {suggestion.type}\n//                                 </span>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default MidpointFinder;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAmB,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,MAAM,QAAQ,wBAAwB;AAC9E,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,mBAAmB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAiBxD;AACA,MAAMC,UAAkC,GAAG;EACvCC,UAAU,EAAE,SAAS;EACrBC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,SAAS;EACfC,OAAO,EAAE,SAAS;EAClBC,QAAQ,EAAE,SAAS;EACnBC,MAAM,EAAE,SAAS;EACjBC,aAAa,EAAE,SAAS;EACxBC,MAAM,EAAE,SAAS;EACjBC,OAAO,EAAE,SAAS;EAClBC,QAAQ,EAAE,SAAS;EACnBC,QAAQ,EAAE,SAAS;EACnBC,SAAS,EAAE,SAAS;EACpBC,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,YAAY,GAAIC,IAAY,IAAa;EAC3C,OAAOf,UAAU,CAACe,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,IAAIhB,UAAU,CAACa,OAAO;AAC/D,CAAC;AAED,MAAMI,cAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgC,QAAQ,EAAEC,WAAW,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkC,MAAM,EAAEC,SAAS,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACoC,QAAQ,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAuD,IAAI,CAAC;EACpG,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAe,EAAE,CAAC;EAChE,MAAM,CAACwC,OAAO,EAAEC,UAAU,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC0C,KAAK,EAAEC,QAAQ,CAAC,GAAG3C,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAAC4C,WAAW,EAAEC,cAAc,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAM8C,iBAAiB,GAAG;IACtBC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOC,CAAkB,IAAK;IAC/CA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBV,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACAS,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE;QAAEvB,QAAQ;QAAEE,QAAQ;QAAEE;MAAO,CAAC,CAAC;;MAE/D;MACA,MAAMoB,GAAG,GAAG,MAAMjD,KAAK,CAACkD,IAAI,CAAmB,gBAAgB,EAAE;QAC7DzB,QAAQ;QACRE,QAAQ;QACRE,MAAM,CAAC;MACX,CAAC,EAAE;QACCsB,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEFJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,GAAG,CAACG,IAAI,CAAC;MAEtC,IAAIH,GAAG,CAACG,IAAI,IAAIH,GAAG,CAACG,IAAI,CAACrB,QAAQ,EAAE;QAC/BC,WAAW,CAACiB,GAAG,CAACG,IAAI,CAACrB,QAAQ,CAAC;QAC9BG,cAAc,CAACe,GAAG,CAACG,IAAI,CAACnB,WAAW,IAAI,EAAE,CAAC;MAC9C,CAAC,MAAM;QACH,MAAM,IAAIoB,KAAK,CAAC,yBAAyB,CAAC;MAC9C;IACJ,CAAC,CAAC,OAAOhB,KAAU,EAAE;MACjBU,OAAO,CAACV,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;;MAE/C;MACA,IAAIiB,QAAQ,GAAG,6EAA6E;MAC5F,IAAIjB,KAAK,CAACkB,QAAQ,IAAIlB,KAAK,CAACkB,QAAQ,CAACH,IAAI,IAAIf,KAAK,CAACkB,QAAQ,CAACH,IAAI,CAACf,KAAK,EAAE;QACpEiB,QAAQ,GAAGjB,KAAK,CAACkB,QAAQ,CAACH,IAAI,CAACf,KAAK;MACxC;MAEAC,QAAQ,CAACgB,QAAQ,CAAC;IACtB,CAAC,SAAS;MACNlB,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACIjC,OAAA;IAAKqD,SAAS,EAAC,iBAAiB;IAACC,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,MAAM,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC7F1D,OAAA;MAAIsD,KAAK,EAAE;QAAEK,SAAS,EAAE;MAAS,CAAE;MAAAD,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChD/D,OAAA;MAAGsD,KAAK,EAAE;QAAEK,SAAS,EAAE;MAAS,CAAE;MAAAD,QAAA,EAAC;IAAyD;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAEhG/D,OAAA;MAAMgE,QAAQ,EAAEvB,YAAa;MAACa,KAAK,EAAE;QAAEW,YAAY,EAAE;MAAO,CAAE;MAAAP,QAAA,gBAC1D1D,OAAA;QAAKqD,SAAS,EAAC,YAAY;QAACC,KAAK,EAAE;UAAEW,YAAY,EAAE;QAAO,CAAE;QAAAP,QAAA,eACxD1D,OAAA,CAACF,mBAAmB;UAChBoE,KAAK,EAAC,YAAY;UAClBC,EAAE,EAAC,UAAU;UACbC,KAAK,EAAE9C,QAAS;UAChB+C,QAAQ,EAAE9C,WAAY;UACtB+C,WAAW,EAAC,qBAAqB;UACjCC,QAAQ;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACN/D,OAAA;QAAKqD,SAAS,EAAC,YAAY;QAACC,KAAK,EAAE;UAAEW,YAAY,EAAE;QAAO,CAAE;QAAAP,QAAA,eACxD1D,OAAA,CAACwE,kBAAkB;UACfN,KAAK,EAAC,YAAY;UAClBC,EAAE,EAAC,UAAU;UACbC,KAAK,EAAE5C,QAAS;UAChB6C,QAAQ,EAAE5C,WAAY;UACtB6C,WAAW,EAAC,sBAAsB;UAClCC,QAAQ;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACN/D,OAAA;QAAKqD,SAAS,EAAC,YAAY;QAACC,KAAK,EAAE;UAAEW,YAAY,EAAE;QAAO,CAAE;QAAAP,QAAA,gBACxD1D,OAAA;UAAOyE,OAAO,EAAC,QAAQ;UAACnB,KAAK,EAAE;YAAEoB,OAAO,EAAE,OAAO;YAAET,YAAY,EAAE;UAAM,CAAE;UAAAP,QAAA,GAAC,iBACvD,EAAChC,MAAM,EAAC,QAC3B;QAAA;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACR/D,OAAA;UACIkB,IAAI,EAAC,OAAO;UACZiD,EAAE,EAAC,QAAQ;UACXQ,GAAG,EAAC,GAAG;UACPC,GAAG,EAAC,IAAI;UACRR,KAAK,EAAE1C,MAAO;UACd2C,QAAQ,EAAG3B,CAAC,IAAKf,SAAS,CAACkD,QAAQ,CAACnC,CAAC,CAACoC,MAAM,CAACV,KAAK,CAAC,CAAE;UACrDd,KAAK,EAAE;YAAEf,KAAK,EAAE;UAAO;QAAE;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eACF/D,OAAA;UAAKsD,KAAK,EAAE;YAAEoB,OAAO,EAAE,MAAM;YAAEK,cAAc,EAAE,eAAe;YAAEC,QAAQ,EAAE;UAAO,CAAE;UAAAtB,QAAA,gBAC/E1D,OAAA;YAAA0D,QAAA,EAAM;UAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACnB/D,OAAA;YAAA0D,QAAA,EAAM;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACN/D,OAAA;QACIkB,IAAI,EAAC,QAAQ;QACb+D,QAAQ,EAAEjD,OAAQ;QAClBsB,KAAK,EAAE;UACHf,KAAK,EAAE,MAAM;UACbkB,OAAO,EAAE,MAAM;UACfyB,eAAe,EAAE,SAAS;UAC1BC,KAAK,EAAE,OAAO;UACdC,MAAM,EAAE,MAAM;UACdC,YAAY,EAAE,KAAK;UACnBC,MAAM,EAAEtD,OAAO,GAAG,aAAa,GAAG;QACtC,CAAE;QAAA0B,QAAA,EAED1B,OAAO,GAAG,qBAAqB,GAAG;MAAe;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,EAEN7B,KAAK,iBACFlC,OAAA;MAAKsD,KAAK,EAAE;QAAE6B,KAAK,EAAE,KAAK;QAAElB,YAAY,EAAE,MAAM;QAAEN,SAAS,EAAE;MAAS,CAAE;MAAAD,QAAA,EACnExB;IAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR,EAEAnC,QAAQ,iBACL5B,OAAA;MAAKqD,SAAS,EAAC,SAAS;MAAAK,QAAA,gBACpB1D,OAAA;QAAIsD,KAAK,EAAE;UAAEK,SAAS,EAAE;QAAS,CAAE;QAAAD,QAAA,EAAC;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3D/D,OAAA;QAAGqD,SAAS,EAAC,kBAAkB;QAACC,KAAK,EAAE;UAAEK,SAAS,EAAE,QAAQ;UAAEM,YAAY,EAAE;QAAO,CAAE;QAAAP,QAAA,gBACjF1D,OAAA;UAAA0D,QAAA,EAAQ;QAA4B;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC5CnC,QAAQ,CAAC2D,OAAO;MAAA;QAAA3B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC,eAEJ/D,OAAA;QAAKsD,KAAK,EAAE;UAAEW,YAAY,EAAE;QAAO,CAAE;QAAAP,QAAA,eACjC1D,OAAA,CAACN,UAAU;UACP8F,gBAAgB,EAAEC,OAAO,CAACC,GAAG,CAACC,6BAA6B,IAAI,EAAG;UAClEC,SAAS,EAAE,CAAC,QAAQ,CAAE;UACtBC,MAAM,EAAEA,CAAA,KAAMxD,cAAc,CAAC,IAAI,CAAE;UAAAqB,QAAA,eAEnC1D,OAAA,CAACP,SAAS;YACN6C,iBAAiB,EAAEA,iBAAkB;YACrCwD,MAAM,EAAE;cAAEC,GAAG,EAAEnE,QAAQ,CAACmE,GAAG;cAAEC,GAAG,EAAEpE,QAAQ,CAACoE;YAAI,CAAE;YACjDC,IAAI,EAAE,EAAG;YAAAvC,QAAA,gBAET1D,OAAA,CAACL,MAAM;cACHuG,QAAQ,EAAE;gBAAEH,GAAG,EAAEnE,QAAQ,CAACmE,GAAG;gBAAEC,GAAG,EAAEpE,QAAQ,CAACoE;cAAI,CAAE;cACnD9B,KAAK,EAAE;gBACHiC,IAAI,EAAE,GAAG;gBACThB,KAAK,EAAE,OAAO;gBACdiB,UAAU,EAAE;cAChB;YAAE;cAAAxC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC,eAEF/D,OAAA,CAACJ,MAAM;cACHkG,MAAM,EAAE;gBAAEC,GAAG,EAAEnE,QAAQ,CAACmE,GAAG;gBAAEC,GAAG,EAAEpE,QAAQ,CAACoE;cAAI,CAAE;cACjDtE,MAAM,EAAEA,MAAM,GAAG,OAAQ,CAAC;cAAA;cAC1B2E,OAAO,EAAE;gBACLC,SAAS,EAAE,SAAS;gBACpBC,WAAW,EAAE,GAAG;gBAChBC,WAAW,EAAE,SAAS;gBACtBC,aAAa,EAAE,GAAG;gBAClBC,YAAY,EAAE;cAClB;YAAE;cAAA9C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eAEN/D,OAAA;QAAIsD,KAAK,EAAE;UAAEK,SAAS,EAAE;QAAS,CAAE;QAAAD,QAAA,GAAC,sBACZ,EAAChC,MAAM,EAAC,QAChC;MAAA;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACJjC,WAAW,CAAC6E,MAAM,KAAK,CAAC,gBACrB3G,OAAA;QAAGsD,KAAK,EAAE;UAAEK,SAAS,EAAE;QAAS,CAAE;QAAAD,QAAA,EAAC;MAA2C;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAElF/D,OAAA,CAAAE,SAAA;QAAAwD,QAAA,gBACI1D,OAAA;UAAKqD,SAAS,EAAC,oBAAoB;UAACC,KAAK,EAAE;YAAEW,YAAY,EAAE,MAAM;YAAEN,SAAS,EAAE;UAAS,CAAE;UAAAD,QAAA,eACrF1D,OAAA;YAAGsD,KAAK,EAAE;cAAE0B,QAAQ,EAAE,MAAM;cAAEf,YAAY,EAAE;YAAO,CAAE;YAAAP,QAAA,GAAC,UAC1C,EAAC5B,WAAW,CAAC6E,MAAM,EAAC,wBAAsB,EAAC/E,QAAQ,CAAC2D,OAAO;UAAA;YAAA3B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACN/D,OAAA;UAAKqD,SAAS,EAAC,aAAa;UAACC,KAAK,EAAE;YAAEoB,OAAO,EAAE,MAAM;YAAEkC,mBAAmB,EAAE,SAAS;YAAEC,GAAG,EAAE;UAAO,CAAE;UAAAnD,QAAA,EAChG5B,WAAW,CAACgF,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,kBAC/BhH,OAAA;YAEIqD,SAAS,EAAC,iBAAiB;YAC3BC,KAAK,EAAE;cACHG,OAAO,EAAE,MAAM;cACf4B,YAAY,EAAE,KAAK;cACnB4B,SAAS,EAAE,2BAA2B;cACtC/B,eAAe,EAAE,SAAS;cAC1BgC,UAAU,EAAE,aAAajG,YAAY,CAAC8F,UAAU,CAAC7F,IAAI,CAAC;YAC1D,CAAE;YAAAwC,QAAA,gBAEF1D,OAAA;cAAIsD,KAAK,EAAE;gBAAE6D,SAAS,EAAE,CAAC;gBAAElD,YAAY,EAAE;cAAM,CAAE;cAAAP,QAAA,EAAEqD,UAAU,CAACK;YAAI;cAAAxD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACxE/D,OAAA;cAAGsD,KAAK,EAAE;gBAAE0B,QAAQ,EAAE,MAAM;gBAAExB,MAAM,EAAE;cAAa,CAAE;cAAAE,QAAA,EAAEqD,UAAU,CAACM;YAAW;cAAAzD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClF/D,OAAA;cACIqD,SAAS,EAAC,KAAK;cACfC,KAAK,EAAE;gBACHoB,OAAO,EAAE,cAAc;gBACvBjB,OAAO,EAAE,SAAS;gBAClByB,eAAe,EAAEjE,YAAY,CAAC8F,UAAU,CAAC7F,IAAI,CAAC;gBAC9CiE,KAAK,EAAE,OAAO;gBACdE,YAAY,EAAE,KAAK;gBACnBL,QAAQ,EAAE,MAAM;gBAChBsC,aAAa,EAAE;cACnB,CAAE;cAAA5D,QAAA,EAEDqD,UAAU,CAAC7F;YAAI;cAAA0C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACd,CAAC;UAAA,GAzBFiD,KAAK;YAAApD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA0BT,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA,eACR,CACL;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC1C,EAAA,CAzNID,cAAwB;AAAAmG,EAAA,GAAxBnG,cAAwB;AA2N9B,eAAeA,cAAc;;AA6B7B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AA6BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}